library(survdistr)
?dgeogg
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35), from = 0, to = 4)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 1, k = 0.5, pg = 0)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 1, k = 0.5, pg = 0), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 1, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 1, k = 0.5, pg = 0.35), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 1, k = 0.5, pg = 0.99)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 1, k = 0.5, pg = 0.99), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 1, k = 0.5, pg = 1)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 1, k = 0.5, pg = 1), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 1, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 1, k = 0.5, pg = 0.35), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 1, k = 0.9, pg = 0.35)
hist(x, probability = T)
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35), from = 0, to = 4, add = T)
x <- rgeogg(10000, alpha = 2, tau = 10, k = 0.5, pg = 0.35)
hist(x, probability = T)
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35), from = 0, to = 4, add = T)
?rnorm
devtools::document()
library(survdistr)
?dgeogg
## Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
?rnorm
hist(x, probability = T)
devtools::document()
library(survdistr)
?dgeogg
library(survdistr)
devtools::document()
library(survdistr)
?dgeogg
devtools::document()
?dgeogg
devtools::document()
?dgeogg
devtools::document()
library(survdistr)
?dgeogg
devtools::document()
?dgeogg
devtools::document()
library(survdistr)
?dgeogg
devtools::document()
?dgeogg
devtools::document()
?dgeogg
devtools::document()
?dgeogg
?GenGamma.orig
devtools::document()
?dgeogg
dgexp(5, alpha = 1, lambda = 2, mu = 1)
dexp(5, 2)
dexp(5, 1/2)
dgexp(5, alpha = 2, lambda = 1, mu = 1)
dexp(5, 1/2)
dgexp(5, alpha = 1, lambda = 2, mu = 0)
dexp(5, 1/2)
# Equivalency with the Two-parameter Exponential distribution
dgexp(5, alpha = 1, lambda = 2, mu = 3)
dexp(5 - 3, rate = 1/2)
# Equivalency with the Two-parameter Exponential distribution
all.equal(dgexp(5, alpha = 1, lambda = 2, mu = 3),
dexp(5 - 3, rate = 1/2))
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1, lambda = 2, mu = 3)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T, xlim = 1)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, xlim = 1)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T, xlim = 1)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, xlim = 1)
hist(x, probability = T, xlim = c(0, 1))
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T, xlim = 1)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, xlim = c(0, 1))
hist(x, probability = T, ylim = c(0, 1))
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T, xlim = 1)
hist(x, probability = T, ylim = c(0, 0.5))
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T, xlim = 1)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, ylim = c(0, 0.5))
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
hist(x, probability = T, ylim = c(0, 0.5), breaks = 100)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, ylim = c(0, 0.5), breaks = 100)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
hist(x, probability = T, ylim = c(0, 0.5), breaks = 200)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, ylim = c(0, 0.5), breaks = 200)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
# Generating values and comparing with the function
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
# Generating values and comparing with the function
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
# Generating values and comparing with the function
x <- rgeogg(10000, alpha = 2, tau = 3, k = 0.5, pg = 0.35)
hist(x, probability = T)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
hist(x, probability = T, breaks = 200)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
hist(x, probability = T, breaks = 100)
curve(dgeogg(x, alpha = 2, tau = 3, k = 0.5, pg = 0.35),
from = 0, to = 4, add = T)
hist(x, probability = T, ylim = c(0, 0.5), breaks = 100)
# Generating values and comparing with the function
x <- rgexp(10000, alpha = 1.5, lambda = 2, mu = 3)
hist(x, probability = T, ylim = c(0, 0.5), breaks = 100)
curve(dgexp(x, alpha = 1.5, lambda = 2, mu = 3),
from = 0, to = 25, add = T)
devtools::document()
?dgexp
devtools::document()
?dgexp
?dgexp
library(survdistr)
?dgexp
devtools::document()
?dgexp
devtools::document()
?dgexp
devtools::document()
?dgexp
devtools::document()
?dgexp
devtools::document()
?dgmweibull
?dgmweibull
devtools::document()
?dgmweibull
?dgmweibull
devtools::document()
?dgmweibull
devtools::document()
?dgmweibull
dgmweibull(5, alpha = 2, gamma = 3, lambda = 0, beta = 1)
dweibull(5, 2, 3)
dweibull(5, 3, 2)
dgmweibull(5, alpha = 2, gamma = 3, lambda = 0, beta = 1)
dweibull(5, scale = 2, shape = 3)
dgmweibull(5, alpha = 2, gamma = 0, lambda = 3, beta = 1)
dweibull(5, scale = 2, shape = 3)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 2, gamma = 0, lambda = 3, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 2, gamma = 1, lambda = 3, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 2, gamma = 1, lambda = 3, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dweibull(5, scale = 2, shape = 3)
dgmweibull(5, alpha = 2, gamma = 1, lambda = 3, beta = 1)
devtools::document()
?dgmweibull
dgmweibull(5, alpha = 2, gamma = 1, lambda = 3, beta = 1)
# Density GM Weibull
#' @rdname GMWeibull
dgmweibull<-function(x, alpha, gamma, lambda, beta, log = FALSE)
{
dens <- (alpha*beta*x^(gamma-1)*(gamma+lambda*x)*exp(lambda*x-alpha*x^gamma*exp(lambda*x)))/((1-exp(-alpha*x^gamma*exp(lambda*x)))^(1-beta))
if(log[1]) dens<-log(dens)
ret <- dens
ret
}
dgmweibull(5, alpha = 2, gamma = 1, lambda = 3, beta = 1)
alpha = 2; gamma = 0.3; lambda = 3; beta = 2
alpha = 2; gamma = 0.3; lambda = 3; beta = 2; x = 5
x^(gamma-1)
alpha*beta*x^(gamma-1)
alpha
alpha*beta
alpha*beta*x^(gamma-1)
(gamma + lambda*x)
alpha*beta*x^(gamma-1)*(gamma + lambda*x)
(gamma + lambda*x)*alpha*beta*x^(gamma-1)
alpha*beta*x^(gamma-1)*(gamma + lambda*x)*exp(lambda*x - exp(lambda*x)*alpha*x^gamma)
alpha*x^gamma
exp(lambda*x)
lambda*x - exp(lambda*x)*alpha*x^gamma
exp(lambda*x)*alpha*x^gamma
exp(lambda*x - exp(lambda*x)*alpha*x^gamma)
alpha = 0.1; gamma = 0.3; lambda = 0.2; beta = 0.5; x = 5
alpha*beta*x^(gamma-1)*(gamma + lambda*x)*exp(lambda*x - exp(lambda*x)*alpha*x^gamma)
alpha*beta*x^(gamma-1)*(gamma + lambda*x)*exp(lambda*x - exp(lambda*x)*alpha*x^gamma)
(alpha*beta*x^(gamma-1)*(gamma + lambda*x)*exp(lambda*x - exp(lambda*x)*alpha*x^gamma))/((1-exp(-alpha*x^gamma*exp(lambda*x)))^(1-beta))
dweibull(5, scale = 2, shape = 3)
dgmweibull(5, alpha = 2, gamma = 1, lambda = 1/3, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 1/3, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
alpha = 0.1; gamma = 0.3; lambda = 0.2; beta = 0.5; x = 5
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 1/3, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
(alpha*beta*x^(gamma-1)*(gamma + lambda*x)*exp(lambda*x - exp(lambda*x)*alpha*x^gamma))/((1-exp(-alpha*x^gamma*exp(lambda*x)))^(1-beta))
dgmweibull(5, alpha = 0.1, gamma = 0.3, lambda = 0.2, beta = 0.5)
(alpha*beta*x^(gamma-1)*(gamma + lambda*x)*exp(lambda*x - exp(lambda*x)*alpha*x^gamma))/((1-exp(-alpha*x^gamma*exp(lambda*x)))^(1-beta))
dgmweibull(5, alpha = 0.1, gamma = 0.3, lambda = 0.2, beta = 0.5)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 1/3, beta = 1)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 1/3, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 1/3, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 1/3, beta = 0)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 1/3, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 1/3, beta = 1/2)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 3, beta = 1)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dweibull(5, scale = 0.5, shape = 3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 3, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
?dweibull
dweibull(5, scale = 1/3, shape = 0.5)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 1/3, shape = 0.5)
dweibull(5, scale = 3, shape = 0.5)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 0, lambda = 0, beta = 1)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
dexp(5, rate = 0.5)
# Equivalency with the Exponential distribution
all.equal(dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
dexp(5, rate = 0.5))
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
?dweibull
dweibull(5, scale = 1/0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 1/0.5, shape = 1/3)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dweibull(5, scale = 2, shape = 3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 1/0.5, shape = 1/3)
dgmweibull(10, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(10, scale = 1/0.5, shape = 1/3)
dgmweibull(1, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(1, scale = 1/0.5, shape = 1/3)
# Equivalency with the Exponential distribution
all.equal(dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
dexp(5, rate = 0.5))
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
library(survdistr)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
hist(x, probability = T, breaks = 100)
curve(drgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 4, add = T)
curve(dgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 4, add = T)
curve(dgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 25, add = T)
hist(x, probability = T, breaks = 100)
curve(dgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.5, lambda = 0, beta = 1)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.5, lambda = 0.2, beta = 0.5)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.5, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.9, gamma = 0.3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
warnings()
devtools::document()
?dgmweibull
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.9, gamma = 0.3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 3)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
hist(x, probability = T, breaks = 100)
curve(dgmweibull(x, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 0.2),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 2, beta = 0.2)
hist(x, probability = T, breaks = 100)
curve(dgmweibull(x, alpha = 0.5, gamma = 3, lambda = 2, beta = 0.2),
from = 0, to = 25, add = T)
devtools::document()
?dgmweibull
devtools::document()
?dkumll
devtools::document()
?dkumll
devtools::document()
?dkumll
devtools::document()
?dkumll
devtools::document()
library(survdistr)
library(survdistr)
?dkumll
??dkumll
devtools::document()
?dkumll
devtools::document()
?dkumll
?xkumBXII
?dkumBXII
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 3, lambda = 2, phi = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 3, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
hist(x, probability = T, breaks = 100)
curve(dkumll(x, alpha = 0.5, gamma = 3, lambda = 2, phi = 2),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 3, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
curve(dkumll(x, alpha = 0.5, gamma = 3, lambda = 2, phi = 2),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 0.5, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 10, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 2, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
curve(dkumll(x, alpha = 0.5, gamma = 2, lambda = 2, phi = 2),
from = 0, to = 25, add = T)
?pweibull
:rweibull()
?rweibull
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 2, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
devtools::document()
library(survdistr)
library(survdistr)
library(survdistr)
?dkumw
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 2, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 1.5, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 0.5)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 0.5, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 0.5, lambda = 3, phi = 10),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 0.5, lambda = 3, phi = 10),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 1.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 1.5, lambda = 3, phi = 10),
from = 0, to = 25, add = T)
curve(dkumw(x, beta = 1.5, c = 1.5, lambda = 3, phi = 10),
from = 0, to = 1.2, add = T)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 1.5, lambda = 3, phi = 10),
from = 0, to = 1.2, add = T)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 0.5, lambda = 3, phi = 10),
from = 0, to = 2, add = T)
# Equivalency with the Weibull
all.equal(dkumw(5, beta = 0.5, c = 2, lambda = 1, phi = 1),
dweibull(5, shape = 2, scale = 1/0.5))
