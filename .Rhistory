# Equivalency with the Exponential distribution
all.equal(dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
dexp(5, rate = 0.5))
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
?dweibull
dweibull(5, scale = 1/0.5, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 1/0.5, shape = 1/3)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 2, shape = 1/3)
dweibull(5, scale = 2, shape = 3)
dgmweibull(5, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(5, scale = 1/0.5, shape = 1/3)
dgmweibull(10, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(10, scale = 1/0.5, shape = 1/3)
dgmweibull(1, alpha = 0.5, gamma = 1/3, lambda = 0, beta = 1)
dweibull(1, scale = 1/0.5, shape = 1/3)
# Equivalency with the Exponential distribution
all.equal(dgmweibull(5, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
dexp(5, rate = 0.5))
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
library(survdistr)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 1, lambda = 0, beta = 1)
hist(x, probability = T, breaks = 100)
curve(drgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 4, add = T)
curve(dgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 4, add = T)
curve(dgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 25, add = T)
hist(x, probability = T, breaks = 100)
curve(dgmweibull(x, alpha = 0.5, gamma = 1, lambda = 0, beta = 1),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.5, lambda = 0, beta = 1)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.5, lambda = 0.2, beta = 0.5)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.5, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 0.3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.9, gamma = 0.3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
warnings()
devtools::document()
?dgmweibull
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.9, gamma = 0.3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 3)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 0.2)
hist(x, probability = T, breaks = 100)
hist(x, probability = T, breaks = 100)
curve(dgmweibull(x, alpha = 0.5, gamma = 3, lambda = 0.2, beta = 0.2),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 2, beta = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rgmweibull(10000, alpha = 0.5, gamma = 3, lambda = 2, beta = 0.2)
hist(x, probability = T, breaks = 100)
curve(dgmweibull(x, alpha = 0.5, gamma = 3, lambda = 2, beta = 0.2),
from = 0, to = 25, add = T)
devtools::document()
?dgmweibull
devtools::document()
?dkumll
devtools::document()
?dkumll
devtools::document()
?dkumll
devtools::document()
?dkumll
devtools::document()
library(survdistr)
library(survdistr)
?dkumll
??dkumll
devtools::document()
?dkumll
devtools::document()
?dkumll
?xkumBXII
?dkumBXII
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 3, lambda = 2, phi = 0.2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 3, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
hist(x, probability = T, breaks = 100)
curve(dkumll(x, alpha = 0.5, gamma = 3, lambda = 2, phi = 2),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 3, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
curve(dkumll(x, alpha = 0.5, gamma = 3, lambda = 2, phi = 2),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 0.5, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 10, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumll(10000, alpha = 0.5, gamma = 2, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
curve(dkumll(x, alpha = 0.5, gamma = 2, lambda = 2, phi = 2),
from = 0, to = 25, add = T)
?pweibull
:rweibull()
?rweibull
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 2, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
devtools::document()
library(survdistr)
library(survdistr)
library(survdistr)
?dkumw
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 2, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 1.5, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 2)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 0.5)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 2, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 0.5, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 0.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 0.5, lambda = 3, phi = 10),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 0.5, lambda = 3, phi = 10),
from = 0, to = 25, add = T)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 1.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 1.5, lambda = 3, phi = 10),
from = 0, to = 25, add = T)
curve(dkumw(x, beta = 1.5, c = 1.5, lambda = 3, phi = 10),
from = 0, to = 1.2, add = T)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 1.5, lambda = 3, phi = 10),
from = 0, to = 1.2, add = T)
# Generating values and comparing with the function
x <- rkumw(10000, beta = 1.5, c = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumw(x, beta = 1.5, c = 0.5, lambda = 3, phi = 10),
from = 0, to = 2, add = T)
# Equivalency with the Weibull
all.equal(dkumw(5, beta = 0.5, c = 2, lambda = 1, phi = 1),
dweibull(5, shape = 2, scale = 1/0.5))
devtools::install_github("aneisse/survdistr")
library(survdistr)
?survdistr
:?survdistr
??survdistr
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 2, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 2, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 2, add = T)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 1.5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 40, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 10, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
#EXAMPLES BUILDING
min(x)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 100, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 10, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 10, to = 40, add = T)
curve(dkumpar(x, beta = 1.5, k = 0.5, lambda = 3, phi = 10),
from = 10, to = 250, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 10, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 10, k = 0.5, lambda = 3, phi = 10),
from = 10, to = 250, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 5, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 5, k = 0.5, lambda = 3, phi = 10),
from = 10, to = 250, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 2, k = 0.5, lambda = 3, phi = 10),
from = 10, to = 250, add = T)
curve(dkumpar(x, beta = 2, k = 0.5, lambda = 3, phi = 10),
from = 2, to = 250, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 2, k = 0.5, lambda = 3, phi = 10),
from = 2, to = 250, add = T)
curve(dkumpar(x, beta = 2, k = 0.5, lambda = 3, phi = 10),
from = 2, to = 80, add = T)
# Generating values and comparing with the function
x <- rkumpar(10000, beta = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumpar(x, beta = 2, k = 0.5, lambda = 3, phi = 10),
from = 2, to = 80, add = T)
library(survdistr)
?dkumgg
devtools::document()
?dkumgg
devtools::document()
?dkumgg
devtools::document()
?dkumgg
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 2, alpha = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 2, alpha = 3, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
devtools::document()
library(survdistr)
?dkumgg
library(flexsurv)
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 2, alpha = 3, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 2, alpha = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 0.5, alpha = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 0.9, alpha = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
# Generating values and comparing with the function
x <- rkumgg(10000, tau = 0.9, alpha = 2, k = 0.5, lambda = 3, phi = 10)
hist(x, probability = T, breaks = 100)
curve(dkumgg(x, tau = 0.9, alpha = 2, k = 0.5, lambda = 3, phi = 10),
from = 2, to = 80, add = T)
curve(dkumgg(x, tau = 0.9, alpha = 2, k = 0.5, lambda = 3, phi = 10),
from = 0, to = 3, add = T)
devtools::install_github("aneisse/survdistr")
survdistr::dkumll
devtools::document()
library(survdistr)
# Maximum Likelihood Parameter estimation KumLL
#' @rdname KumLL
lkumll<-function(param, x){
if(any(c(param[1]<0,param[2]<0,param[3]<0,param[4]<0))){
vero<-NA
}
else{
a<-param[1]
g<-param[2]
l<-param[3]
p<-param[4]
if(any(a < 1e-20)) return(.Machine$double.xmax^.5)
if(any(g < 1e-20)) return(.Machine$double.xmax^.5)
if(any(l < 1e-20)) return(.Machine$double.xmax^.5)
if(any(p < 1e-20)) return(.Machine$double.xmax^.5)
f <- (l*p*g)/(a^(l*g))*x^(l*g-1)*(1+(x/a)^g)^(-l-1)*(1-(1-1/(1+(x/a)^g))^l)^(p-1)
f <- f[f > -Inf & f < Inf]
lv <- log(f + 2.225074e-308)
vero <- sum(-lv, na.rm = TRUE)
#vero <- lv
}
vero
}
f <- dkumll(x, a, g, l, p)
# Maximum Likelihood Parameter estimation KumLL
#' @rdname KumLL
lkumll<-function(param){
if(any(c(param[1]<0,param[2]<0,param[3]<0,param[4]<0))){
vero<-NA
}
else{
a<-param[1]
g<-param[2]
l<-param[3]
p<-param[4]
if(any(a < 1e-20)) return(.Machine$double.xmax^.5)
if(any(g < 1e-20)) return(.Machine$double.xmax^.5)
if(any(l < 1e-20)) return(.Machine$double.xmax^.5)
if(any(p < 1e-20)) return(.Machine$double.xmax^.5)
f <- dkumll(x, a, g, l, p)
#f <- (l*p*g)/(a^(l*g))*x^(l*g-1)*(1+(x/a)^g)^(-l-1)*(1-(1-1/(1+(x/a)^g))^l)^(p-1)
#f <- f[f > -Inf & f < Inf]
#lv <- log(f + 2.225074e-308)
vero <- sum(-lv, na.rm = TRUE)
#vero <- lv
}
vero
}
# Maximum Likelihood Parameter estimation KumLL
#' @rdname KumLL
mlkumll <- function(x, a.ini, g.ini, l.ini, p.ini){
# Likelihood Function KumLL
lkumll<-function(param, x){
if(any(c(param[1]<0,param[2]<0,param[3]<0,param[4]<0))){
vero<-NA
}
else{
a<-param[1]
g<-param[2]
l<-param[3]
p<-param[4]
if(any(a < 1e-20)) return(.Machine$double.xmax^.5)
if(any(g < 1e-20)) return(.Machine$double.xmax^.5)
if(any(l < 1e-20)) return(.Machine$double.xmax^.5)
if(any(p < 1e-20)) return(.Machine$double.xmax^.5)
f <- dkumll(x, a, g, l, p)
loglike <- sum(-log(f), na.rm = TRUE)
}
return(loglike)
}
# Estimating parameters
ini.val <- c(a = 1.5, g = 5.5, l = 1.8, p = 1.1)
estim <- optim(fn = lkumll, par = ini.val, x = x, hessian = T)
return(estim)
}
# Maximum Likelihood Parameter estimation KumLL
#' @rdname KumLL
mlkumll <- function(x, a.ini, g.ini, l.ini, p.ini){
# Likelihood Function KumLL
lkumll<-function(param, x){
if(any(c(param[1]<0,param[2]<0,param[3]<0,param[4]<0))){
vero<-NA
}
else{
a<-param[1]
g<-param[2]
l<-param[3]
p<-param[4]
if(any(a < 1e-20)) return(.Machine$double.xmax^.5)
if(any(g < 1e-20)) return(.Machine$double.xmax^.5)
if(any(l < 1e-20)) return(.Machine$double.xmax^.5)
if(any(p < 1e-20)) return(.Machine$double.xmax^.5)
f <- dkumll(x, a, g, l, p)
loglike <- sum(-log(f), na.rm = TRUE)
}
return(loglike)
}
# Estimating parameters
ini.val <- c(a = 1.5, g = 5.5, l = 1.8, p = 1.1)
estim <- optim(fn = lkumll, par = ini.val, x = x, hessian = T)
return(estim)
}
devtools::document()
remove.packages(survdistr)
warning("Initial parameter values outside parameter space")
# Maximum Likelihood Parameter estimation KumLL
#' @rdname KumLL
mlkumll <- function(x, a.ini, g.ini, l.ini, p.ini){
# Likelihood Function KumLL
lkumll<-function(param, x){
if(any(param < 0)){
vero<-NA
}
else{
a <- param[1]
g <- param[2]
l <- param[3]
p <- param[4]
if(any(param < 1e-20)) return(.Machine$double.xmax^.5)
f <- dkumll(x, a, g, l, p)
loglike <- sum(-log(f))
return(loglike)
}
}
# Estimating parameters
ini.val <- c(a = 1.5, g = 5.5, l = 1.8, p = 1.1)
estim <- optim(fn = lkumll, par = ini.val, x = x, hessian = T)
return(estim)
}
mlkumll <- function(x, a.ini, g.ini, l.ini, p.ini){
# Likelihood Function KumLL
lkumll<-function(param, x){
if(any(param < 0)){
vero<-NA
}
else{
a <- param[1]
g <- param[2]
l <- param[3]
p <- param[4]
if(any(param < 1e-20)) return(.Machine$double.xmax^.5)
f <- dkumll(x, a, g, l, p)
loglike <- sum(-log(f))
return(loglike)
}
}
# Estimating parameters
ini.val <- c(a = a.ini, g = g.ini, l = l.ini, p = p.ini)
estim <- optim(fn = lkumll, par = ini.val, x = x, hessian = T)
return(estim)
}
ini.val <- c(a = a.ini, g = g.ini, l = l.ini, p = p.ini)
any(c(1, 2, 3))==1
param < 0
any(c(1, 2, 3)==1)
# Maximum Likelihood Parameter estimation KumLL
#' @rdname KumLL
mlkumll <- function(x, a.ini, g.ini, l.ini, p.ini){
# Likelihood Function KumLL
lkumll<-function(param, x){
if(any(param < 0)){
vero<-NA
}
else{
a <- param[1]
g <- param[2]
l <- param[3]
p <- param[4]
if(any(param < 1e-20)) return(.Machine$double.xmax^.5)
f <- dkumll(x, a, g, l, p)
loglike <- sum(-log(f))
return(loglike)
}
}
# Estimating parameters
ini.val <- c(a = a.ini, g = g.ini, l = l.ini, p = p.ini)
estim <- optim(fn = lkumll, par = ini.val, x = x, hessian = T)
return(estim)
}
